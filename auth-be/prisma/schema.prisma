// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  username      String   @unique
  profilePic    String   @default("")
  refreshToken  String   @default("")
  password      String
  otp           String   @default("")
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tweets        Tweet[]
  replies       Reply[]
  reposts       Repost[]
}

model Tweet {
  id            String   @id @default(uuid())
  description   String   @default("")
  picture       String   @default("")
  createdAt     DateTime @default(now())
  creator       User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId     String
  repostCount   Int      @default(0)
  replyCount    Int      @default(0)
  replies       Reply[]
  reposts       Repost[]
}

model Reply {
  id            String   @id @default(uuid())
  description   String   @default("")
  createdAt     DateTime @default(now())
  tweet         Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId       String
  creator       User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId     String
}

model Repost {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  tweet         Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId       String
  creator       User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId     String
}
